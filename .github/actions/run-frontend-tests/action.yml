name: "Run Frontend Tests"
description: "Installs dependencies and runs tests in a Node.js project"
inputs:
  working-directory:
    description: "The working directory where your frontend project is located"
    required: true
    default: "./frontend"
  codecov-token:
    description: "Codecov token for uploading coverage"
    required: true
  auth0-secret:
    description: "Auth0 secret"
    required: true
  auth0-base-url:
    description: "Auth0 base URL"
    required: true
  auth0-issuer-base-url:
    description: "Auth0 issuer base URL"
    required: true
  auth0-client-id:
    description: "Auth0 client ID"
    required: true
  auth0-client-secret:
    description: "Auth0 client secret"
    required: true
  auth0-audience:
    description: "Auth0 audience"
    required: true
  node-env:
    description: "Node environment"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Start Backend Container
      shell: bash
      run: |
        docker run -d \
          -e DOCKER_ON='false' \
          -e PORT='8080' \
          -e DB_HOST='//host.docker.internal:5432/compass' \
          -e DB_USERNAME='postgres' \
          -e DB_PASSWORD='test_password' \
          -e DDL_AUTO='create' \
          -e AUTH0_ISSUER_BASE_URL='${{ inputs.auth0-issuer-base-url }}' \
          -e AUTH0_AUDIENCE='${{ inputs.auth0-audience }}' \
          -e AUTH0_CLIENT_ID='${{ inputs.auth0-client-id }}' \
          -e AUTH0_CLIENT_SECRET='${{ inputs.auth0-client-secret }}' \
          -e AUTH0_MGMT_AUDIENCE='${{ inputs.auth0-audience }}' \
          -e APP_URL='http://localhost' \
          -e SECURITY_LOG_LEVEL='DEBUG' \
          -e SWAGGER_UI_ON='false' \
          --add-host host.docker.internal:host-gateway \
          -v $(pwd)/backend/build:/app/build \
          -p 8080:8080 \
          --name test-container \
          backend-tests

    - name: Wait for Database Schema Creation
      shell: bash
      run: |
        for i in {1..24}; do
          if PGPASSWORD=test_password psql -h 127.0.0.1 -p 5432 -U postgres -d compass -c "SELECT 1 FROM local_user LIMIT 1;" > /dev/null 2>&1; then
            echo "Database schema is ready."
            exit 0
          fi
          echo "Waiting for database schema to be created..."
          sleep 5
        done
        echo "Database schema was not created within the expected time."
        exit 1

    - name: Add Users to local_user Table
      shell: bash
      run: |
        PGPASSWORD=test_password psql -h 127.0.0.1 -p 5432 -U postgres -d compass -c "\
          INSERT INTO local_user (id, role) VALUES
          ('auth0|6640a6df7d1d70fe02cc72c9', 'PARTICIPANT'),
          ('auth0|6640a6717d1d70fe02cc729a', 'SOCIAL_WORKER');"

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: "20"

    - name: Install Dependencies
      run: |
        cd ${{ inputs.working-directory }}
        npm install
      shell: bash

    - name: Install Playwright Browsers
      run: |
        cd ${{ inputs.working-directory }}
        npx playwright install --with-deps
      shell: bash

    - name: Build Project
      run: |
        cd ${{ inputs.working-directory }}
        npm run build
      shell: bash

    - name: Run Playwright Tests
      run: |
        cd ${{ inputs.working-directory }}
        NODE_ENV=${{ inputs.node-env }} AUTH0_SECRET='${{ inputs.auth0-secret }}' AUTH0_BASE_URL='${{ inputs.auth0-base-url }}' AUTH0_ISSUER_BASE_URL='${{ inputs.auth0-issuer-base-url }}' AUTH0_CLIENT_ID='${{ inputs.auth0-client-id }}' AUTH0_CLIENT_SECRET='${{ inputs.auth0-client-secret }}' AUTH0_AUDIENCE='${{ inputs.auth0-audience }}' npm run test:coverage
      shell: bash
      continue-on-error: true

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ inputs.codecov-token }}
        directory: ${{ inputs.working-directory }}/coverage
        flags: frontend
        fail_ci_if_error: false
        verbose: true

    - name: Upload Test Results
      uses: actions/upload-artifact@v2
      with:
        name: frontend-test-results
        path: ${{ inputs.working-directory }}/coverage
