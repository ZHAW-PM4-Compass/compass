/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDaySheetDto,
  GetDaySheetDto,
  UpdateDaySheetDto,
} from '../models/index';
import {
    CreateDaySheetDtoFromJSON,
    CreateDaySheetDtoToJSON,
    GetDaySheetDtoFromJSON,
    GetDaySheetDtoToJSON,
    UpdateDaySheetDtoFromJSON,
    UpdateDaySheetDtoToJSON,
} from '../models/index';

export interface CreateDaySheetRequest {
    createDaySheetDto: CreateDaySheetDto;
}

export interface GetDaySheetByIdRequest {
    id: number;
}

export interface GetDaySheetById1Request {
    date: string;
}

export interface UpdateDayRequest {
    updateDaySheetDto: UpdateDaySheetDto;
}

/**
 * 
 */
export class DaySheetControllerApi extends runtime.BaseAPI {

    /**
     */
    async createDaySheetRaw(requestParameters: CreateDaySheetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDaySheetDto>> {
        if (requestParameters['createDaySheetDto'] == null) {
            throw new runtime.RequiredError(
                'createDaySheetDto',
                'Required parameter "createDaySheetDto" was null or undefined when calling createDaySheet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/daysheet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDaySheetDtoToJSON(requestParameters['createDaySheetDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDaySheetDtoFromJSON(jsonValue));
    }

    /**
     */
    async createDaySheet(requestParameters: CreateDaySheetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDaySheetDto> {
        const response = await this.createDaySheetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDaySheetByIdRaw(requestParameters: GetDaySheetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDaySheetDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDaySheetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/daysheet/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDaySheetDtoFromJSON(jsonValue));
    }

    /**
     */
    async getDaySheetById(requestParameters: GetDaySheetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDaySheetDto> {
        const response = await this.getDaySheetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDaySheetById1Raw(requestParameters: GetDaySheetById1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDaySheetDto>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling getDaySheetById1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/daysheet/getByDate/{date}`.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDaySheetDtoFromJSON(jsonValue));
    }

    /**
     */
    async getDaySheetById1(requestParameters: GetDaySheetById1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDaySheetDto> {
        const response = await this.getDaySheetById1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateDayRaw(requestParameters: UpdateDayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDaySheetDto>> {
        if (requestParameters['updateDaySheetDto'] == null) {
            throw new runtime.RequiredError(
                'updateDaySheetDto',
                'Required parameter "updateDaySheetDto" was null or undefined when calling updateDay().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/daysheet`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDaySheetDtoToJSON(requestParameters['updateDaySheetDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDaySheetDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateDay(requestParameters: UpdateDayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDaySheetDto> {
        const response = await this.updateDayRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
