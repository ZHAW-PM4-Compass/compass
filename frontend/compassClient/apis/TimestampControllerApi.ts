/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTimestampDto,
  GetTimestampDto,
  UpdateTimestampDto,
} from '../models/index';
import {
    CreateTimestampDtoFromJSON,
    CreateTimestampDtoToJSON,
    GetTimestampDtoFromJSON,
    GetTimestampDtoToJSON,
    UpdateTimestampDtoFromJSON,
    UpdateTimestampDtoToJSON,
} from '../models/index';

export interface CreateTimestampRequest {
    createTimestampDto: CreateTimestampDto;
}

export interface DeleteTimestampRequest {
    id: number;
}

export interface GetTimestampByIdRequest {
    id: number;
}

export interface PutTimestampRequest {
    updateTimestampDto: UpdateTimestampDto;
}

/**
 * 
 */
export class TimestampControllerApi extends runtime.BaseAPI {

    /**
     */
    async createTimestampRaw(requestParameters: CreateTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTimestampDto>> {
        if (requestParameters['createTimestampDto'] == null) {
            throw new runtime.RequiredError(
                'createTimestampDto',
                'Required parameter "createTimestampDto" was null or undefined when calling createTimestamp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/timestamp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTimestampDtoToJSON(requestParameters['createTimestampDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTimestampDtoFromJSON(jsonValue));
    }

    /**
     */
    async createTimestamp(requestParameters: CreateTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTimestampDto> {
        const response = await this.createTimestampRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTimestampRaw(requestParameters: DeleteTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTimestamp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/timestamp/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTimestamp(requestParameters: DeleteTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTimestampRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getTimestampByIdRaw(requestParameters: GetTimestampByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTimestampDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTimestampById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/timestamp/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTimestampDtoFromJSON(jsonValue));
    }

    /**
     */
    async getTimestampById(requestParameters: GetTimestampByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTimestampDto> {
        const response = await this.getTimestampByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putTimestampRaw(requestParameters: PutTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTimestampDto>> {
        if (requestParameters['updateTimestampDto'] == null) {
            throw new runtime.RequiredError(
                'updateTimestampDto',
                'Required parameter "updateTimestampDto" was null or undefined when calling putTimestamp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/timestamp`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTimestampDtoToJSON(requestParameters['updateTimestampDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTimestampDtoFromJSON(jsonValue));
    }

    /**
     */
    async putTimestamp(requestParameters: PutTimestampRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTimestampDto> {
        const response = await this.putTimestampRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
