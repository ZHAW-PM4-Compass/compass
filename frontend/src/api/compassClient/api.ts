/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateDaySheetDto
 */
export interface CreateDaySheetDto {
    /**
     * 
     * @type {string}
     * @memberof CreateDaySheetDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDaySheetDto
     */
    'day_report'?: string;
}
/**
 * 
 * @export
 * @interface CreateTimestampDto
 */
export interface CreateTimestampDto {
    /**
     * 
     * @type {number}
     * @memberof CreateTimestampDto
     */
    'day_sheet_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateTimestampDto
     */
    'start_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTimestampDto
     */
    'end_time'?: string;
}
/**
 * 
 * @export
 * @interface GetDaySheetDto
 */
export interface GetDaySheetDto {
    /**
     * 
     * @type {number}
     * @memberof GetDaySheetDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetDaySheetDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetDaySheetDto
     */
    'day_report'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetDaySheetDto
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {Array<Timestamp>}
     * @memberof GetDaySheetDto
     */
    'timestamps'?: Array<Timestamp>;
}
/**
 * 
 * @export
 * @interface GetTimestampDto
 */
export interface GetTimestampDto {
    /**
     * 
     * @type {number}
     * @memberof GetTimestampDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetTimestampDto
     */
    'day_sheet_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetTimestampDto
     */
    'start_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetTimestampDto
     */
    'end_time'?: string;
}
/**
 * 
 * @export
 * @interface ParticipantDto
 */
export interface ParticipantDto {
    /**
     * 
     * @type {number}
     * @memberof ParticipantDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParticipantDto
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Timestamp
 */
export interface Timestamp {
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Timestamp
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Timestamp
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface UpdateDaySheetDto
 */
export interface UpdateDaySheetDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateDaySheetDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateDaySheetDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDaySheetDto
     */
    'day_report'?: string;
}
/**
 * 
 * @export
 * @interface UpdateTimestampDto
 */
export interface UpdateTimestampDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateTimestampDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateTimestampDto
     */
    'day_sheet_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateTimestampDto
     */
    'start_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTimestampDto
     */
    'end_time'?: string;
}
/**
 * 
 * @export
 * @interface WorkHourDto
 */
export interface WorkHourDto {
    /**
     * 
     * @type {number}
     * @memberof WorkHourDto
     */
    'daySheetId'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkHourDto
     */
    'date'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkHourDto
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkHourDto
     */
    'workHours'?: number;
    /**
     * 
     * @type {ParticipantDto}
     * @memberof WorkHourDto
     */
    'participant'?: ParticipantDto;
}

/**
 * BaseControllerApi - axios parameter creator
 * @export
 */
export const BaseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BaseControllerApi - functional programming interface
 * @export
 */
export const BaseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BaseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async index(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.index(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BaseControllerApi.index']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BaseControllerApi - factory interface
 * @export
 */
export const BaseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BaseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(options?: any): AxiosPromise<string> {
            return localVarFp.index(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BaseControllerApi - object-oriented interface
 * @export
 * @class BaseControllerApi
 * @extends {BaseAPI}
 */
export class BaseControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaseControllerApi
     */
    public index(options?: RawAxiosRequestConfig) {
        return BaseControllerApiFp(this.configuration).index(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DaySheetControllerApi - axios parameter creator
 * @export
 */
export const DaySheetControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateDaySheetDto} createDaySheetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDaySheet: async (createDaySheetDto: CreateDaySheetDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDaySheetDto' is not null or undefined
            assertParamExists('createDaySheet', 'createDaySheetDto', createDaySheetDto)
            const localVarPath = `/api/daysheet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDaySheetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDaySheet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/daysheet/getAll/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDaySheetById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDaySheetById', 'id', id)
            const localVarPath = `/api/daysheet/getById/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDaySheetById1: async (date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getDaySheetById1', 'date', date)
            const localVarPath = `/api/daysheet/getByDate/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateDaySheetDto} updateDaySheetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDay: async (updateDaySheetDto: UpdateDaySheetDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateDaySheetDto' is not null or undefined
            assertParamExists('updateDay', 'updateDaySheetDto', updateDaySheetDto)
            const localVarPath = `/api/daysheet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDaySheetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DaySheetControllerApi - functional programming interface
 * @export
 */
export const DaySheetControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DaySheetControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateDaySheetDto} createDaySheetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDaySheet(createDaySheetDto: CreateDaySheetDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDaySheetDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDaySheet(createDaySheetDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DaySheetControllerApi.createDaySheet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDaySheet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkHourDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDaySheet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DaySheetControllerApi.getAllDaySheet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDaySheetById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDaySheetDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDaySheetById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DaySheetControllerApi.getDaySheetById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDaySheetById1(date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDaySheetDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDaySheetById1(date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DaySheetControllerApi.getDaySheetById1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateDaySheetDto} updateDaySheetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDay(updateDaySheetDto: UpdateDaySheetDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDaySheetDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDay(updateDaySheetDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DaySheetControllerApi.updateDay']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DaySheetControllerApi - factory interface
 * @export
 */
export const DaySheetControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DaySheetControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateDaySheetDto} createDaySheetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDaySheet(createDaySheetDto: CreateDaySheetDto, options?: any): AxiosPromise<GetDaySheetDto> {
            return localVarFp.createDaySheet(createDaySheetDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDaySheet(options?: any): AxiosPromise<Array<WorkHourDto>> {
            return localVarFp.getAllDaySheet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDaySheetById(id: number, options?: any): AxiosPromise<GetDaySheetDto> {
            return localVarFp.getDaySheetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDaySheetById1(date: string, options?: any): AxiosPromise<GetDaySheetDto> {
            return localVarFp.getDaySheetById1(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateDaySheetDto} updateDaySheetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDay(updateDaySheetDto: UpdateDaySheetDto, options?: any): AxiosPromise<GetDaySheetDto> {
            return localVarFp.updateDay(updateDaySheetDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DaySheetControllerApi - object-oriented interface
 * @export
 * @class DaySheetControllerApi
 * @extends {BaseAPI}
 */
export class DaySheetControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateDaySheetDto} createDaySheetDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DaySheetControllerApi
     */
    public createDaySheet(createDaySheetDto: CreateDaySheetDto, options?: RawAxiosRequestConfig) {
        return DaySheetControllerApiFp(this.configuration).createDaySheet(createDaySheetDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DaySheetControllerApi
     */
    public getAllDaySheet(options?: RawAxiosRequestConfig) {
        return DaySheetControllerApiFp(this.configuration).getAllDaySheet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DaySheetControllerApi
     */
    public getDaySheetById(id: number, options?: RawAxiosRequestConfig) {
        return DaySheetControllerApiFp(this.configuration).getDaySheetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DaySheetControllerApi
     */
    public getDaySheetById1(date: string, options?: RawAxiosRequestConfig) {
        return DaySheetControllerApiFp(this.configuration).getDaySheetById1(date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateDaySheetDto} updateDaySheetDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DaySheetControllerApi
     */
    public updateDay(updateDaySheetDto: UpdateDaySheetDto, options?: RawAxiosRequestConfig) {
        return DaySheetControllerApiFp(this.configuration).updateDay(updateDaySheetDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TimestampControllerApi - axios parameter creator
 * @export
 */
export const TimestampControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTimestampDto} createTimestampDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimestamp: async (createTimestampDto: CreateTimestampDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTimestampDto' is not null or undefined
            assertParamExists('createTimestamp', 'createTimestampDto', createTimestampDto)
            const localVarPath = `/api/timestamp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTimestampDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimestamp: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTimestamp', 'id', id)
            const localVarPath = `/api/timestamp/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimestampById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTimestampById', 'id', id)
            const localVarPath = `/api/timestamp/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTimestampDto} updateTimestampDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimestamp: async (updateTimestampDto: UpdateTimestampDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateTimestampDto' is not null or undefined
            assertParamExists('putTimestamp', 'updateTimestampDto', updateTimestampDto)
            const localVarPath = `/api/timestamp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTimestampDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimestampControllerApi - functional programming interface
 * @export
 */
export const TimestampControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimestampControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTimestampDto} createTimestampDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTimestamp(createTimestampDto: CreateTimestampDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTimestampDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTimestamp(createTimestampDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimestampControllerApi.createTimestamp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTimestamp(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTimestamp(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimestampControllerApi.deleteTimestamp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimestampById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTimestampDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimestampById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimestampControllerApi.getTimestampById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateTimestampDto} updateTimestampDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTimestamp(updateTimestampDto: UpdateTimestampDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTimestampDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTimestamp(updateTimestampDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimestampControllerApi.putTimestamp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TimestampControllerApi - factory interface
 * @export
 */
export const TimestampControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimestampControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTimestampDto} createTimestampDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTimestamp(createTimestampDto: CreateTimestampDto, options?: any): AxiosPromise<GetTimestampDto> {
            return localVarFp.createTimestamp(createTimestampDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimestamp(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTimestamp(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimestampById(id: number, options?: any): AxiosPromise<GetTimestampDto> {
            return localVarFp.getTimestampById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateTimestampDto} updateTimestampDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTimestamp(updateTimestampDto: UpdateTimestampDto, options?: any): AxiosPromise<GetTimestampDto> {
            return localVarFp.putTimestamp(updateTimestampDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimestampControllerApi - object-oriented interface
 * @export
 * @class TimestampControllerApi
 * @extends {BaseAPI}
 */
export class TimestampControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateTimestampDto} createTimestampDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimestampControllerApi
     */
    public createTimestamp(createTimestampDto: CreateTimestampDto, options?: RawAxiosRequestConfig) {
        return TimestampControllerApiFp(this.configuration).createTimestamp(createTimestampDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimestampControllerApi
     */
    public deleteTimestamp(id: number, options?: RawAxiosRequestConfig) {
        return TimestampControllerApiFp(this.configuration).deleteTimestamp(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimestampControllerApi
     */
    public getTimestampById(id: number, options?: RawAxiosRequestConfig) {
        return TimestampControllerApiFp(this.configuration).getTimestampById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateTimestampDto} updateTimestampDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimestampControllerApi
     */
    public putTimestamp(updateTimestampDto: UpdateTimestampDto, options?: RawAxiosRequestConfig) {
        return TimestampControllerApiFp(this.configuration).putTimestamp(updateTimestampDto, options).then((request) => request(this.axios, this.basePath));
    }
}



