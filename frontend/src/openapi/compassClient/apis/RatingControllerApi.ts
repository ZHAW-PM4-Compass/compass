/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryDto,
  CreateRatingDto,
  ExtendedRatingDto,
  RatingDto,
} from '../models/index';
import {
    CategoryDtoFromJSON,
    CategoryDtoToJSON,
    CreateRatingDtoFromJSON,
    CreateRatingDtoToJSON,
    ExtendedRatingDtoFromJSON,
    ExtendedRatingDtoToJSON,
    RatingDtoFromJSON,
    RatingDtoToJSON,
} from '../models/index';

export interface CreateRatingRequest {
    ratingDto: RatingDto;
}

export interface CreateRatingsByDaySheetIdRequest {
    daySheetId: number;
    createRatingDto: Array<CreateRatingDto>;
}

export interface GetMoodRatingByDateRequest {
    date: Date;
    userId?: string;
}

export interface RecordCategoryRatingsByDaySheetAndUserIdRequest {
    daySheetId: number;
    categoryDto: Array<CategoryDto>;
}

export interface RecordCategoryRatingsByDaySheetAndUserId1Request {
    daySheetId: number;
    userId: string;
    categoryDto: Array<CategoryDto>;
}

/**
 * 
 */
export class RatingControllerApi extends runtime.BaseAPI {

    /**
     */
    async createRatingRaw(requestParameters: CreateRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingDto>> {
        if (requestParameters['ratingDto'] == null) {
            throw new runtime.RequiredError(
                'ratingDto',
                'Required parameter "ratingDto" was null or undefined when calling createRating().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rating`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RatingDtoToJSON(requestParameters['ratingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingDtoFromJSON(jsonValue));
    }

    /**
     */
    async createRating(requestParameters: CreateRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingDto> {
        const response = await this.createRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createRatingsByDaySheetIdRaw(requestParameters: CreateRatingsByDaySheetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RatingDto>>> {
        if (requestParameters['daySheetId'] == null) {
            throw new runtime.RequiredError(
                'daySheetId',
                'Required parameter "daySheetId" was null or undefined when calling createRatingsByDaySheetId().'
            );
        }

        if (requestParameters['createRatingDto'] == null) {
            throw new runtime.RequiredError(
                'createRatingDto',
                'Required parameter "createRatingDto" was null or undefined when calling createRatingsByDaySheetId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rating/createRatingsByDaySheetId/{daySheetId}`.replace(`{${"daySheetId"}}`, encodeURIComponent(String(requestParameters['daySheetId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createRatingDto']!.map(CreateRatingDtoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RatingDtoFromJSON));
    }

    /**
     */
    async createRatingsByDaySheetId(requestParameters: CreateRatingsByDaySheetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RatingDto>> {
        const response = await this.createRatingsByDaySheetIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMoodRatingByDateRaw(requestParameters: GetMoodRatingByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedRatingDto>>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling getMoodRatingByDate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rating/getMoodRatingByDate/{date}`.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtendedRatingDtoFromJSON));
    }

    /**
     */
    async getMoodRatingByDate(requestParameters: GetMoodRatingByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedRatingDto>> {
        const response = await this.getMoodRatingByDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recordCategoryRatingsByDaySheetAndUserIdRaw(requestParameters: RecordCategoryRatingsByDaySheetAndUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RatingDto>>> {
        if (requestParameters['daySheetId'] == null) {
            throw new runtime.RequiredError(
                'daySheetId',
                'Required parameter "daySheetId" was null or undefined when calling recordCategoryRatingsByDaySheetAndUserId().'
            );
        }

        if (requestParameters['categoryDto'] == null) {
            throw new runtime.RequiredError(
                'categoryDto',
                'Required parameter "categoryDto" was null or undefined when calling recordCategoryRatingsByDaySheetAndUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rating/recordMyMoodRatingsByDaySheetId/{daySheetId}`.replace(`{${"daySheetId"}}`, encodeURIComponent(String(requestParameters['daySheetId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['categoryDto']!.map(CategoryDtoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RatingDtoFromJSON));
    }

    /**
     */
    async recordCategoryRatingsByDaySheetAndUserId(requestParameters: RecordCategoryRatingsByDaySheetAndUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RatingDto>> {
        const response = await this.recordCategoryRatingsByDaySheetAndUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recordCategoryRatingsByDaySheetAndUserId1Raw(requestParameters: RecordCategoryRatingsByDaySheetAndUserId1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RatingDto>>> {
        if (requestParameters['daySheetId'] == null) {
            throw new runtime.RequiredError(
                'daySheetId',
                'Required parameter "daySheetId" was null or undefined when calling recordCategoryRatingsByDaySheetAndUserId1().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling recordCategoryRatingsByDaySheetAndUserId1().'
            );
        }

        if (requestParameters['categoryDto'] == null) {
            throw new runtime.RequiredError(
                'categoryDto',
                'Required parameter "categoryDto" was null or undefined when calling recordCategoryRatingsByDaySheetAndUserId1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rating/recordMoodRatingsByDaySheetIdAndUserId/{daySheetId}/{userId}`.replace(`{${"daySheetId"}}`, encodeURIComponent(String(requestParameters['daySheetId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['categoryDto']!.map(CategoryDtoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RatingDtoFromJSON));
    }

    /**
     */
    async recordCategoryRatingsByDaySheetAndUserId1(requestParameters: RecordCategoryRatingsByDaySheetAndUserId1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RatingDto>> {
        const response = await this.recordCategoryRatingsByDaySheetAndUserId1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
